#Create layer with just damaged property cells
fishnet_dmg <- dat %>%
filter(damaged == 1)
#Set map projection
dat <- dat %>%
st_transform(crs = 6505)
map_2 <-
grid.arrange(ncol = 2,
ggplot() +
geom_sf(data = dat, aes(fill=as.factor(damaged)), alpha = 0.8, color = "transparent") +
scale_fill_viridis(labels = c('Not Damaged', 'Damaged'),
alpha = .75,
begin = 0.05,
end = 0.8,
direction = 1,
discrete = TRUE,
option = "B") +
geom_sf(data=msp_boundary,
fill = "transparent",
color = "#474747",
size = .5) +
geom_sf(data=fishnet_dmg,
fill = "transparent",
color = "white",
size = .25) +
labs(title ="Damaged Properties",
fill = "Status",
caption = "Source: opendata.minneapolismn.gov") +
mapTheme,
ggplot() +
geom_sf(data = dat, aes(fill=cmmrcl_sum), alpha = 0.8, color = "transparent") +
scale_fill_viridis(
alpha = .75,
begin = 0,
end = 0.9,
direction = 1,
discrete = FALSE,
option = "B") +
geom_sf(data=msp_boundary,
fill = "transparent",
color = "#474747",
size = .5) +
geom_sf(data=fishnet_dmg,
fill = "transparent",
color = "white",
size = .25) +
labs(title ="Commercial Properties",
fill = "Count",
caption = "Source: gis-hennepin.hub.arcgis.com") +
mapTheme
)
dat <- dat %>%
st_transform(crs = 6505)
map_4 <-
grid.arrange(ncol = 2,
ggplot() +
geom_sf(data = dat, aes(fill=value_mean), alpha = 0.8, color = "transparent") +
scale_fill_viridis(
alpha = .75,
begin = 0.05,
end = 0.85,
direction = 1,
discrete = FALSE,
option = "B") +
geom_sf(data=msp_boundary,
fill = "transparent",
color = "#474747",
size = .5) +
geom_sf(data=fishnet_dmg,
fill = "transparent",
color = "white",
size = .25) +
labs(title ="Mean Taxable Value",
fill = "Value ($)",
caption = "Source: gis-hennepin.hub.arcgis.com") +
mapTheme,
ggplot() +
geom_sf(data = dat, aes(fill=absntee_sum), alpha = 0.8, color = "transparent") +
scale_fill_viridis(
alpha = .75,
begin = 0,
end = 0.9,
direction = 1,
discrete = FALSE,
option = "B") +
geom_sf(data=msp_boundary,
fill = "transparent",
color = "#474747",
size = .5) +
geom_sf(data=fishnet_dmg,
fill = "transparent",
color = "white",
size = .25) +
labs(title ="Non MSP Resident\nOwned Properties",
fill = "Count",
caption = "Source: gis-hennepin.hub.arcgis.com") +
mapTheme
)
ggsave("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Assignments/Final Project/Graphics/Maps/PP_Map1_Fishnet.pdf", plot = map_1)
ggsave("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Assignments/Final Project/Graphics/Maps/PP_Maps2_DmgCmrcl.pdf", plot = map_2, width = 11)
ggsave("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Assignments/Final Project/Graphics/Maps/PP_Maps3_dstnc.pdf", plot = map_3, width = 11)
ggsave("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Assignments/Final Project/Graphics/Maps/PP_Maps4_VluAbsntee.pdf", plot = map_4, width = 11)
modelChi2 <- mod2$null.deviance - mod_2$deviance
mod1 <- glm(damaged ~ cmmrcl_sum + DIST_PRTST + DIST_POLC + value_mean + absntee_sum,
family="binomial"(link="logit"), data = dat)
summary(mod1)
mod2 <- glm(damaged ~ cmmrcl_sum + DIST_PRTST + DIST_POLC + absntee_sum,
family="binomial"(link="logit"), data = dat)
summary(mod2)
anova(mod1, mod2, test="Chisq")
stargazer(mod1, mod2, type="text", digits = 2, single.row = FALSE, out = "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Assignments/Final Project/Graphics/Charts/PP_Stargazer.html")
modelChi2 <- mod2$null.deviance - mod_2$deviance
modelChi2 <- mod2$null.deviance - mod2$deviance
modelChi2
modelChi2 <- mod2$null.deviance - mod2$deviance
modelChi2
modelChi1 <- mod1$null.deviance - mod1$deviance
modelChi1
mod1$deviance
1376.7-1385.7
#Create dataframe to hold predicted probabilities
pred <- as.data.frame(fitted(mod1))
pred <- mutate(pred, "obs" = dat$damaged)
pred <- rename(pred, "prob" = "fitted(mod1)")
pred <- mutate(pred, "pred" = ifelse(prob < 0.5, 0, 1)) #if predicted probabilities are <0.5, then classify as zero, otherwise classify as 1
#Create confusion matrix
caret::confusionMatrix(reference = as.factor(pred$obs),
data = as.factor(pred$pred),
positive = "1")
#if exp(coef) = .8:  a unit increase in X is associated with
#a 20% decline in the odds ratio
#if exp(coef)  = 1.5:  a unit increase in X is associated with
#a 50% increase in the odds ratio
#percent change in the odds ratio
100 * (exp(coef(mod1))-1)
0.013041588762*5280
0.019180883129*5280
0.000001890168*1000
0.000001890168*10000
0.000001890168*100000
* All else equal, a a unit ($1) increase in the mean property value of a cell **increases** the odds ratio of a cell containing damaged properties by 0.000002%. This seems crazy small, but it is 0.2% per \$100,000.
#if exp(coef) = .8:  a unit increase in X is associated with
#a 20% decline in the odds ratio
#if exp(coef)  = 1.5:  a unit increase in X is associated with
#a 50% increase in the odds ratio
#percent change in the odds ratio
100 * (exp(coef(mod2))-1)
?tidycencus
?tidycensus
library(tidycensus)
library(sf)
library(tidyverse)
census_api_key("f236b4a4fedd8e324862532cf679d82f717c7cd2")
census_api_key("f236b4a4fedd8e324862532cf679d82f717c7cd2")
#### FOR CENSUS ####
census_vars <- load_variables(2020, "sf1")
#### FOR CENSUS ####
census_vars <- load_variables(2020, "p1")
#### FOR CENSUS ####
census_vars <- load_variables(2020, "pl")
View(census_vars)
WhitePop <- "P1_003N"
BlackPop <- "P1_004N"
WhitePop_by_tract <-
get_decennial("tract",
variables = WhitePop,
year = 2020,
state = "Minnesota",
county = "Hennepin",
geometry = TRUE)
View(WhitePop_by_tract)
TotalPop <- "P1_002N"
WhitePop_by_tract <-
get_decennial("tract",
variables = c(WhitePop, TotalPop),
year = 2020,
state = "Minnesota",
county = "Hennepin",
geometry = TRUE)
WhitePop_by_tract <-
get_decennial("tract",
variables = c(WhitePop, TotalPop),
year = 2020,
state = "Minnesota",
county = "Hennepin",
geometry = TRUE)
#### FOR ACS ####
# Look here for variable codes
acs_vars <- load_variables(2020, "acs5")
View(acs_vars)
household_income <- "B19013_001"
HHincome_by_tract <-
get_acs("tract",
variables = household_income,
year = 2020,
state = "Minnesota",
county = "Hennepin",
geometry = TRUE)
View(HHincome_by_tract)
HHincome_by_tract202 <-
get_acs("tract",
variables = household_income,
year = 2020,
state = "Minnesota",
county = "Hennepin",
geometry = TRUE)
write_sf(HHincome_by_tract2020, "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/
CPLN505_Planning by Numbers/Assignments/Final Project/Data/Processed/Census_2020/
hhincome_by_tract_2020.shp")
HHincome_by_tract2020 <-
get_acs("tract",
variables = household_income,
year = 2020,
state = "Minnesota",
county = "Hennepin",
geometry = TRUE)
write_sf(HHincome_by_tract2020, "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/
CPLN505_Planning by Numbers/Assignments/Final Project/Data/Processed/Census_2020/
hhincome_by_tract_2020.shp")
setwd("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Assignments/Final Project/Data")
write_sf(HHincome_by_tract2020, "Processed/Census_2020/
hhincome_by_tract_2020.shp")
library(tidycensus)
library(sf)
library(tidyverse)
household_income <- "B19013_001"
HHincome_by_tract2020 <-
get_acs("tract",
variables = household_income,
year = 2020,
state = "Minnesota",
county = "Hennepin",
geometry = TRUE)
write_sf(HHincome_by_tract2020, "Processed/Census_2020/
hhincome_by_tract_2020.shp")
write_sf(HHincome_by_tract2020, "hhincome_by_tract_2020.shp")
WhitePop_by_tract <-
get_decennial("tract",
variables = c(WhitePop, TotalPop),
year = 2020,
state = "Minnesota",
county = "Hennepin",
geometry = TRUE)
View(WhitePop_by_tract)
race_pop <- get_acs(geography = "tract",
variables = c(tot_pop =  "B03002_001", black_pop = "B03002_004",
white_pop = "B03002_003"), year = 2020,
output = "wide", state = "MN",
county = "Hennepin", geometry = TRUE)
View(race_pop)
pop_by_tract <- race_pop %>%
mutate(pct_black = black_popE/tot_popE,
pct_white = white_popE/tot_popE)
View(pop_by_tract)
write_sf(pop_by_tract, "race_by_tract_acs_2020.shp")
hhIncome <- read_csv("Processed/ZonalStatsTables/ZonalStats_hhincome_acs_2020.csv")
pctWhite <- read_csv("Processed/ZonalStatsTables/ZonalStats_pctWhite_acs_2020.csv")
View(hhIncome)
hhIncome <- read_csv("Processed/ZonalStatsTables/ZonalStats_hhincome_acs_2020.csv") %>%
dplyr::select(uniqueID, MEDIAN) %>%
rename(hhIncome_med = MEDIAN)
View(pctWhite)
pctWhite <- read_csv("Processed/ZonalStatsTables/ZonalStats_pctWhite_acs_2020.csv") %>%
dplyr::select(uniqueID, MEDIAN) %>%
rename(pctWhite_med = MEDIAN)
#Join features with fishnet and remove NAs
dat <- msp_fishnet %>%
mutate(uniqueID = as.integer(uniqueID)) %>%
left_join(commercial, by = "uniqueID") %>%
left_join(damaged, by = "uniqueID") %>%
left_join(dist_protest, by = "uniqueID") %>%
left_join(dist_police, by = "uniqueID") %>%
left_join(TAXVALUE, by = "uniqueID") %>%
left_join(absentee, by = "uniqueID") %>%
left_join(hhIncome, by = "uniqueID") %>%
left_join(pctWhite, by = "uniqueID") %>%
na.omit()
#log adjust
dat$value_log <- log(dat$value_mean)
#replace infinite values with zeros
dat$value_log[sapply(dat$value_log, is.infinite)] <- 0
#display as interactive table
reactable(dat, defaultPageSize = 5)
View(hhIncome)
glimpse(dat)
dat <- dat %>%
st_transform(crs = 6505)
map_5 <-
grid.arrange(ncol = 2,
ggplot() +
geom_sf(data = dat, aes(fill=hhIncome_med), alpha = 0.8, color = "transparent") +
scale_fill_viridis(alpha = .75,
begin = 0.05,
end = 0.85,
direction = 1,
discrete = FALSE,
option = "B") +
geom_sf(data=msp_boundary,
fill = "transparent",
color = "#474747",
size = .5) +
geom_sf(data=fishnet_dmg,
fill = "transparent",
color = "white",
size = .25) +
labs(title ="Median Household Income",
fill = "Value ($)",
caption = "Source: 2020 5-Year ACS") +
mapTheme,
ggplot() +
geom_sf(data = dat, aes(fill=pctWhite_med), alpha = 0.8, color = "transparent") +
scale_fill_viridis(alpha = .75,
begin = 0,
end = 0.9,
direction = 1,
discrete = FALSE,
option = "B") +
geom_sf(data=msp_boundary,
fill = "transparent",
color = "#474747",
size = .5) +
geom_sf(data=fishnet_dmg,
fill = "transparent",
color = "white",
size = .25) +
labs(title ="% White Population",
fill = "%",
caption = "Source: 2020 5-Year ACS") +
mapTheme
)
ggsave("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Assignments/Final Project/Graphics/Maps/PP_Maps5_IncmWht.pdf", plot = map_5, width = 11)
glimpse(dat)
dat_plotvars <- dat %>%
as.data.frame() %>%
dplyr::select(damaged, cmmrcl_sum, DIST_PRTST, DIST_POLC, value_mean, value_log,
absntee_sum, hhIncome_med, pctWhite_med) %>%
pivot_longer(cols = -damaged)
chart_3 <-
ggplot(dat_plotvars) +
geom_violin(aes(x = as.factor(damaged),
y = value, fill = as.factor(damaged))) +
facet_wrap(~name, scales = "free_y") +
labs(x="Damage Status", y="Value") +
scale_fill_manual(values = c("#f3a108", "#4c0073"),
labels = c("Not Damaged", "Damaged"), name = "") +
plotTheme
chart_3
#Pivot to visualize with violin plot
dat_plotvars <- dat %>%
as.data.frame() %>%
dplyr::select(damaged, cmmrcl_sum, DIST_PRTST, DIST_POLC, value_mean, value_log,
absntee_sum, hhIncome_med, pctWhite_med) %>%
pivot_longer(cols = -damaged)
#violin plots
chart_3 <-
ggplot(dat_plotvars) +
geom_violin(aes(x = as.factor(damaged),
y = value, fill = as.factor(damaged))) +
facet_wrap(~name, scales = "free_y") +
labs(x="Damage Status", y="Value") +
scale_fill_manual(values = c("#f3a108", "#4c0073"),
labels = c("Not Damaged", "Damaged"), name = "") +
plotTheme
chart_3
#Pivot to visualize with violin plot
dat_plotvars <- dat %>%
as.data.frame() %>%
dplyr::select(damaged, cmmrcl_sum, DIST_PRTST, DIST_POLC, value_mean, value_log,
absntee_sum, hhIncome_med, pctWhite_med) %>%
pivot_longer(cols = -damaged)
#violin plots
chart_3 <-
ggplot(dat_plotvars) +
geom_violin(aes(x = as.factor(damaged),
y = value, fill = as.factor(damaged))) +
facet_wrap(~name, scales = "free_y") +
labs(x="Damage Status", y="Value") +
scale_fill_manual(values = c("#f3a108", "#4c0073"),
labels = c("Not Damaged", "Damaged"), name = "") +
plotTheme
chart_3
glimpse(dat)
corr_vars <- dat %>%
as.data.frame() %>%
dplyr::select(-uniqueID, -geometry, -dmg_SUM) %>%
rename("Absentee Ownership" = absntee_sum,
"Property Value" = value_mean,
"Property Value (log)" = value_log,
"Distance from Protest Sites" = DIST_PRTST,
"Distance from Police Stations" = DIST_POLC,
"Commercial Properties" = cmmrcl_sum,
"Presence of Damaged Properties" = damaged,
"Median Household Income" = hhIncome_med,
"Pop % White" = pctWhite_med)
#compute correlation matrix
cormatrix <- cor(corr_vars) %>%
round(., 2)
chart_4 <-
ggcorrplot(cormatrix,
method = "square",
hc.order = TRUE,
colors = c("#f3a108", "white", "#4c0073"),
outline.color = "white",
type = "lower",
tl.cex = 9,
lab = TRUE)
chart_4
dat$damaged <- as.factor(dat$damaged)
mod1 <- glm(damaged ~ cmmrcl_sum + DIST_PRTST + DIST_POLC + value_mean + absntee_sum + pctWhite_med,
family="binomial"(link="logit"), data = dat)
summary(mod1)
drop1(mod1, test="Chisq")
mod2 <- glm(damaged ~ cmmrcl_sum + DIST_PRTST + DIST_POLC + absntee_sum + value_mean,
family="binomial"(link="logit"), data = dat)
summary(mod2)
mod3 <- glm(damaged ~ cmmrcl_sum + DIST_PRTST + DIST_POLC + absntee_sum,
family="binomial"(link="logit"), data = dat)
summary(mod3)
1395.7-1388.7
glimpse(dat)
mod4 <- glm(damaged ~ cmmrcl_sum + DIST_PRTST + DIST_POLC + value_mean + absntee_sum + hhIncome_med,
family="binomial"(link="logit"), data = dat)
summary(mod4)
anova(mod1, mod2, mod3, test="Chisq")
stargazer(mod1, mod2, mod3, type="text", digits = 2, single.row = FALSE, out = "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN505_Planning by Numbers/Assignments/Final Project/Graphics/Charts/PP_Stargazer.html")
#if exp(coef) = .8:  a unit increase in X is associated with
#a 20% decline in the odds ratio
#if exp(coef)  = 1.5:  a unit increase in X is associated with
#a 50% increase in the odds ratio
#percent change in the odds ratio
100 * (exp(coef(mod3))-1)
#Create dataframe to hold predicted probabilities
pred <- as.data.frame(fitted(mod3))
pred <- mutate(pred, "obs" = dat$damaged)
pred <- rename(pred, "prob" = "fitted(mod3)")
pred <- mutate(pred, "pred" = ifelse(prob < 0.5, 0, 1)) #if predicted probabilities are <0.5, then classify as zero, otherwise classify as 1
#Create confusion matrix
caret::confusionMatrix(reference = as.factor(pred$obs),
data = as.factor(pred$pred),
positive = "1")
ctrl <- trainControl(method = "cv",
number = 100,
savePredictions = TRUE)
dmgFit <- train(as.factor(dmg_SUM) ~ .,
data = dat %>%
as.data.frame() %>%
dplyr::select(cmmrcl_sum, DIST_PRTST, DIST_POLC, absntee_sum,
absntee_sum) %>%
na.omit(),
method="glm", family="binomial",
trControl = ctrl)
dmgFit <- train(as.factor(damaged) ~ .,
data = dat %>%
as.data.frame() %>%
dplyr::select(damaged, cmmrcl_sum, DIST_PRTST, DIST_POLC, absntee_sum,
absntee_sum) %>%
na.omit(),
method="glm", family="binomial",
trControl = ctrl)
dmgFit
dat_map <- dat %>%
dplyr::select(uniqueID, cmmrcl_sum, damaged, geometry, DIST_PRTST, DIST_POLC, value_mean,
absntee_sum, geometry)
allPredictions <-
predict(dmgFit, dat, type="prob")[,2]
dat_pred <-
cbind(dat_map, allPredictions) %>%
mutate(allPredictions = round(allPredictions * 100))
ggplot() +
geom_sf(data=dat_pred, aes(fill=factor(ntile(allPredictions,4))),
colour=NA) +
scale_fill_manual(values = palette,
labels=as.character(quantile(dat_pred$allPredictions,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Grouped in\nQuantile\nBreaks)") +
mapTheme +
labs(title="Predicted Probability of Property Damage",
subtitle = "Based on a Logistic Regression Model")
dat_pred %>%
mutate(confResult=case_when(allPredictions < 50 & inund_sum==0 ~ "True Negative",
allPredictions >= 50 & inund_sum==1 ~ "True Positive",
allPredictions < 50 & inund_sum==1 ~ "False Negative",
allPredictions >= 50 & inund_sum==0 ~ "False Positive")) %>%
ggplot()+
geom_sf(aes(fill = confResult), color = "transparent")+
scale_fill_manual(values = c("#f3a108", "#f27405", "#d93d04", "#4c0073"),
name="Outcomes")+
labs(title="Confusion Metrics") +
mapTheme
dat_pred %>%
mutate(confResult=case_when(allPredictions < 50 & damaged==0 ~ "True Negative",
allPredictions >= 50 & damaged==1 ~ "True Positive",
allPredictions < 50 & damaged==1 ~ "False Negative",
allPredictions >= 50 & damaged==0 ~ "False Positive")) %>%
ggplot()+
geom_sf(aes(fill = confResult), color = "transparent")+
scale_fill_manual(values = c("#f3a108", "#f27405", "#d93d04", "#4c0073"),
name="Outcomes")+
labs(title="Confusion Metrics") +
mapTheme
ggplot() +
geom_sf(data=dat_pred, aes(fill=factor(ntile(allPredictions,4))),
colour=NA) +
scale_fill_manual(values = palette,
labels=as.character(quantile(dat_pred$allPredictions,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Grouped in\nQuantile\nBreaks)") +
mapTheme +
labs(title="Predicted Probability of Property Damage",
subtitle = "Based on a Logistic Regression Model")
